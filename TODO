# -*- mode: org; -*-

#+STARTUP: hidestars
#+STARTUP: odd
#+STARTUP: 

* TODO Write a module to get a JDBC ResultSet as a WebRowSet XML.
* TODO Add JavaDoc comments
* TODO Fill out the README
* TODO Tomcat config for db
#+BEGIN_SRC xml
<Resource name="jdbc/AtomicDB"
          auth="Container"
          type="javax.sql.DataSource"
          factory="org.apache.tomcat.jdbc.pool.DataSourceFactory"
          testWhileIdle="true"
          testOnBorrow="true"
          testOnReturn="false"
          validationQuery="SELECT 1"
          validationInterval="30000"
          timeBetweenEvictionRunsMillis="30000"
          maxActive="100"
          minIdle="10"
          maxWait="10000"
          initialSize="10"
          removeAbandonedTimeout="60"
          removeAbandoned="true"
          logAbandoned="true"
          minEvictableIdleTimeMillis="30000"
          jmxEnabled="true"
          jdbcInterceptors="org.apache.tomcat.jdbc.pool.interceptor.ConnectionState;
			    org.apache.tomcat.jdbc.pool.interceptor.StatementFinalizer"
          username=""
          password=""
	  alternateUsernameAllowed="true"
          url="jdbc:sqlite:/home/dventimi/work/atomic/atomic.db"
          driverClassName="org.sqlite.JDBC"/>
#+END_SRC
#+BEGIN_SRC
<Resource name="jdbc/AtomicDB"
          auth="Container"
          type="javax.sql.DataSource"
          factory="org.apache.tomcat.jdbc.pool.DataSourceFactory"
          testWhileIdle="true"
          testOnBorrow="true"
          testOnReturn="false"
          validationQuery="SELECT 1"
          validationInterval="30000"
          timeBetweenEvictionRunsMillis="30000"
          maxActive="100"
          minIdle="10"
          maxWait="10000"
          initialSize="0"
          removeAbandonedTimeout="60"
          removeAbandoned="true"
          logAbandoned="true"
          minEvictableIdleTimeMillis="30000"
          jmxEnabled="true"
          jdbcInterceptors="org.apache.tomcat.jdbc.pool.interceptor.ConnectionState;
			    org.apache.tomcat.jdbc.pool.interceptor.StatementFinalizer"
          username=""
          password=""
	  alternateUsernameAllowed="true"
          url="jdbc:postgresql:atomic"
          driverClassName="org.postgresql.Driver"/>
#+END_SRC
* TODO Secure Tomcat
* TODO Add JavaDoc comments
* TODO Fill out the README
* DONE Merge JDBCEdmProvider and NonRecursivejdbcedmprovider.
  CLOCK: [2016-01-07 Thu 19:21]--[2016-01-07 Thu 20:03] =>  0:42
* TODO Fix semanticdb handling of Java package imports.
* TODO Autoconfiscate Atomic.
* TODO Make a validator for EdmProvider.
  CLOCK: [2016-01-08 Fri 07:46]--[2016-01-08 Fri 08:26] =>  0:40

* TODO Insert a model layer right below Olingo Entity Data Model types.
  CLOCK: [2016-01-09 Sat 17:13]--[2016-01-09 Sat 17:59] =>  0:46

* TODO Explore different ways of transforming SQL data into RESTful representations.
  1. WebRowSet XML styled with XSLT directly into Atom entries, with
    <data> content.  No OData at all.
     - not flexible
     - skip
  2. WebRowSet XML styled with XSLT into just the <data> content, and
     then inserted into Atom entries generated via StringTemplate.
     Should produce the exact same result as 1 above.  No OData at
     all.
     - flexible
     - do not skip
  3. WebRowSet XML styled with XSLT directly into Atom entries, with
     Odata <properties> content.  Definitely OData.
     - not flexible
     - skip
  4. WebRowSet XML styed with XSLT into just the OData <properties>
     content, and then inserted into Atom entries generated via
     StringTemplate.  Definitely OData.
     - flexible
     - do not skip
  5. WebRowSet XML styled with XSLT directly into ODATA json
     representations.  Definitely ODATA.
     - not flexible
     - skip
  6. WebRowSet XML styled with XSLT into just the ODATA value data,
     and then inserted into a full ODATA representation via
     StringTemplate.
     - flexible
     - do not skip
  7. Return just the WebRowSet XML.  No Atom at all.
     - do not skip
  8. Java data rendered as java.util.Properties do, then inserted into
     Atom entries generated via StringTemplate.
     - do not skip
  9. Java data rendered directly into ODATA entries via
     StringTemplate.
     - not flexible
     - skip
  10. Java data rendered first into OData <properties> content, then
      rendered into OData entries, all using StringTemplate, but in a
      two-step process.
      - flexible
      - do not skip
* TODO Use new Java features.
*** Java 5
***** Generics
***** Enhanced for Loop
***** Varargs
***** Static imports
***** Annotations
*** Java 6
***** new Collections features
***** JDBC4
******* Auto-loading driver
******* Connection management
******* New exceptions
*** Java 7
***** Diamond operator
***** Try-with-resources
***** Numeric literals with underscores
*** Java 8
***** Lambda expressions

